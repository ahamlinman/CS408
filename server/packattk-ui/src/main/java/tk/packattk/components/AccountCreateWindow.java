package tk.packattk.components;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Validator.InvalidValueException;
import com.vaadin.data.validator.EmailValidator;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;

public class AccountCreateWindow extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button create;
	@AutoGenerated
	private PasswordField passwordConfirm;
	@AutoGenerated
	private PasswordField password;
	@AutoGenerated
	private TextField email;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public AccountCreateWindow() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		create.setClickShortcut(KeyCode.ENTER);

		email.addValidator(new EmailValidator("The provided email was invalid"));
		password.addValidator(new StringLengthValidator("Password must be 5-20 characters", 5, 20, false));
		passwordConfirm.addValidator(new StringLengthValidator("Confirmation password must be 5-20 characters", 5, 20, false));
	}

	public void addCreateListener(ClickListener listener) {
		create.addClickListener(listener);
	}

	public String getEmail() {
		return email.getValue();
	}

	public TextField getEmailField() {
		return email;
	}

	public String getPassword() {
		return password.getValue();
	}

	public PasswordField getPasswordField() {
		return password;
	}

	public PasswordField getPasswordConfirmField() {
		return passwordConfirm;
	}

	public void validatePasswordsEqual() {
		if(!password.getValue().equals(passwordConfirm.getValue())) {
			throw new InvalidValueException("The passwords do not match");
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// email
		email = new TextField();
		email.setCaption("Email");
		email.setImmediate(false);
		email.setDescription("Email");
		email.setWidth("100.0%");
		email.setHeight("-1px");
		email.setInvalidAllowed(false);
		email.setRequired(true);
		email.setInputPrompt("Email");
		mainLayout.addComponent(email, "top:16.0px;left:0.0px;");
		
		// password
		password = new PasswordField();
		password.setCaption("Password");
		password.setImmediate(false);
		password.setDescription("Password");
		password.setWidth("100.0%");
		password.setHeight("-1px");
		password.setInvalidAllowed(false);
		password.setRequired(true);
		password.setInputPrompt("Password");
		mainLayout.addComponent(password, "top:80.0px;left:0.0px;");
		
		// passwordConfirm
		passwordConfirm = new PasswordField();
		passwordConfirm.setCaption("Confirm Password");
		passwordConfirm.setImmediate(false);
		passwordConfirm.setDescription("Confirm Password");
		passwordConfirm.setWidth("100.0%");
		passwordConfirm.setHeight("-1px");
		passwordConfirm.setInvalidAllowed(false);
		passwordConfirm.setRequired(true);
		passwordConfirm.setInputPrompt("password");
		mainLayout.addComponent(passwordConfirm, "top:144.0px;left:0.0px;");
		
		// create
		create = new Button();
		create.setCaption("Create Account");
		create.setImmediate(true);
		create.setDescription("Create Account");
		create.setWidth("100.0%");
		create.setHeight("-1px");
		mainLayout.addComponent(create, "top:208.0px;right:-5.0px;left:0.0px;");
		
		return mainLayout;
	}

}
