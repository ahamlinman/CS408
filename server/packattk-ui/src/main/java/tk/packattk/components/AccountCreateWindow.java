package tk.packattk.components;

import java.util.Arrays;
import java.util.List;

import tk.packattk.utils.Person;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Validator.InvalidValueException;
import com.vaadin.data.validator.EmailValidator;
import com.vaadin.data.validator.RegexpValidator;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;

public class AccountCreateWindow extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button create;
	@AutoGenerated
	private ComboBox location;
	@AutoGenerated
	private TextField puid;
	@AutoGenerated
	private TextField lastname;
	@AutoGenerated
	private TextField firstname;
	@AutoGenerated
	private PasswordField passwordConfirm;
	@AutoGenerated
	private PasswordField password;
	@AutoGenerated
	private TextField email;
	private static final long serialVersionUID = 1L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public AccountCreateWindow() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		create.setClickShortcut(KeyCode.ENTER);

		email.addValidator(new EmailValidator("The provided email was invalid"));
		email.setValidationVisible(true);

		password.addValidator(new StringLengthValidator("Password must be 5-20 characters", 5, 20, false));
		password.setValidationVisible(true);

		passwordConfirm.addValidator(new StringLengthValidator("Confirmation password must be 5-20 characters", 5, 20, false));
		passwordConfirm.setValidationVisible(true);

		puid.addValidator(new RegexpValidator("[0-9]{9}", true, "PUID is in an invalid format (must have 9 digits with 1 leading zero)"));
		puid.setValidationVisible(true);

		List<String> locations = Arrays.asList("Owen", "Shreve", "Third Street Suites");
		location.addItems(locations);
	}

	public void addCreateListener(ClickListener listener) {
		create.addClickListener(listener);
	}

	public Person getPerson() {
		return new Person(
				puid.getValue(),
				lastname.getValue(),
				firstname.getValue(),
				location.getValue().toString(),
				0,
				false,
				email.getValue(),
				password.getValue());
	}

	public void validate() throws InvalidValueException {
		try {
			email.validate();
			password.validate();
			passwordConfirm.validate();
			firstname.validate();
			lastname.validate();
			puid.validate();
			location.validate();
		} catch (InvalidValueException e) {
			throw e;
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// email
		email = new TextField();
		email.setCaption("Email");
		email.setImmediate(false);
		email.setDescription("Email");
		email.setWidth("100.0%");
		email.setHeight("-1px");
		email.setInvalidAllowed(false);
		email.setRequired(true);
		email.setInputPrompt("Email");
		mainLayout.addComponent(email, "top:16.0px;left:0.0px;");

		// password
		password = new PasswordField();
		password.setCaption("Password");
		password.setImmediate(false);
		password.setDescription("Password");
		password.setWidth("100.0%");
		password.setHeight("-1px");
		password.setInvalidAllowed(false);
		password.setRequired(true);
		password.setInputPrompt("Password");
		mainLayout.addComponent(password, "top:80.0px;left:0.0px;");

		// passwordConfirm
		passwordConfirm = new PasswordField();
		passwordConfirm.setCaption("Confirm Password");
		passwordConfirm.setImmediate(false);
		passwordConfirm.setDescription("Confirm Password");
		passwordConfirm.setWidth("100.0%");
		passwordConfirm.setHeight("-1px");
		passwordConfirm.setInvalidAllowed(false);
		passwordConfirm.setRequired(true);
		passwordConfirm.setInputPrompt("password");
		mainLayout.addComponent(passwordConfirm, "top:144.0px;left:0.0px;");

		// firstname
		firstname = new TextField();
		firstname.setCaption("First Name");
		firstname.setImmediate(false);
		firstname.setDescription("First Name");
		firstname.setWidth("100.0%");
		firstname.setHeight("-1px");
		firstname.setRequired(true);
		mainLayout.addComponent(firstname, "top:208.0px;left:0.0px;");

		// lastname
		lastname = new TextField();
		lastname.setCaption("Last Name");
		lastname.setImmediate(false);
		lastname.setDescription("Last Name");
		lastname.setWidth("100.0%");
		lastname.setHeight("-1px");
		lastname.setRequired(true);
		mainLayout.addComponent(lastname, "top:272.0px;left:0.0px;");

		// puid
		puid = new TextField();
		puid.setCaption("PUID");
		puid.setImmediate(false);
		puid.setDescription("PUID");
		puid.setWidth("100.0%");
		puid.setHeight("-1px");
		puid.setRequired(true);
		mainLayout.addComponent(puid, "top:336.0px;left:0.0px;");

		// location
		location = new ComboBox();
		location.setCaption("Hall");
		location.setImmediate(false);
		location.setDescription("Hall");
		location.setWidth("100.0%");
		location.setHeight("-1px");
		location.setRequired(true);
		mainLayout.addComponent(location, "top:400.0px;left:0.0px;");

		// create
		create = new Button();
		create.setCaption("Create Account");
		create.setImmediate(true);
		create.setDescription("Create Account");
		create.setWidth("100.0%");
		create.setHeight("-1px");
		mainLayout.addComponent(create, "top:464.0px;left:0.0px;");

		return mainLayout;
	}

}
